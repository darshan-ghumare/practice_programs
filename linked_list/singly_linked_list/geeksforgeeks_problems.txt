1. Swap nodes in a linked list without swapping data
   https://www.geeksforgeeks.org/swap-nodes-in-a-linked-list-without-swapping-data/
   It has following cases to be handled,
    1) x and y may or may not be adjacent.
    2) Either x or y may be a head node.
    3) Either x or y may be last node.
    4) x and/or y may not be present in linked list.
   The idea it to first search x and y in given linked list. If any of them is
   not present, then return. While searching for x and y, keep track of current
   and previous pointers. First change next of previous pointers, then change
   next of current pointers.
2. Flatten a multilevel linked list
   https://www.geeksforgeeks.org/flatten-a-linked-list-with-next-and-child-pointers/
   The problem clearly say that we need to flatten level by level. The idea of
   solution is, we start from first level, process all nodes one by one, if a
   node has a child, then we append the child at the end of list, otherwise we
   donâ€™t do anything. After the first level is processed, all next level nodes
   will be appended after first level. Same process is followed for the
   appended nodes.
3. Clone a linked list with next and random pointer | Set 1
   https://www.geeksforgeeks.org/a-linked-list-with-next-and-arbit-pointer/
   You are given a Double Link List with one pointer of each node pointing to
   the next node just like in a single link list. The second pointer however
   CAN point to any node in the list and not just the previous node. Now write
   a program in O(n) time to duplicate this list. That is, write a program
   which will create a copy of this list.
   1) Create the copy of node 1 and insert it between node 1 & node 2 in
      original Linked List, create the copy of 2 and insert it between 2 & 3..
      Continue in this fashion, add the copy of N afte the Nth node
   2) Now copy the arbitrary link in this fashion

      original->next->arbitrary = original->arbitrary->next;  /*TRAVERSE TWO NODES*/
      This works because original->next is nothing but copy of original and
      Original->arbitrary->next is nothing but copy of arbitrary.
   3) Now restore the original and copy linked lists in this fashion in a single loop.

     original->next = original->next->next;
     copy->next = copy->next->next;
   4) Make sure that last element of original->next is NULL.

   Refer below post for implementation of this method.
   Clone a linked list with next and random pointer in O(1) space

   Time Complexity: O(n)
   Auxiliary Space: O(1)


